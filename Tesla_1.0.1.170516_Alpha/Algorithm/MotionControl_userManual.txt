/*===================================================================*/
/*此文档为割草机运动控制接口函数说明，以及调用关系说明*/
/*
/*各个函数的输入输出待更新...
/*
/*author: Junhuan Li
/*date: 2017/09/12
/*===================================================================*/

thread_motion.c

/*=======================     运动控制线程   ========================*/
/*函数说明：
/*运动控制线程，包括全部运动控制相关功能调用
/*
/*
/*调用关系：
/*包括运动控制相关变量初始化：Motion_Init
/*传感器数据更新：Motion_Get_Position_2D   Motion_Get_Sensor
/*状态机调用：Motion_Run
/*调用电机驱动接口：Motion_Process_Motor_Speed    update_motor_control();
/*
/*===================================================================*/
void mower_motion_thread(void* parameter);



motion_control.c

/*===============     运动控制相关变量初始化   ======================*/
/*函数说明：
/*初始化相关变量
/*
/*
/*调用关系：
/*初始化直线位置控制的朝前量：Motion_Set_Path_Param
/*初始化角度跟踪PID参数：Motion_Set_Angle_Param
/*初始化磁导线巡线PID参数：Motion_Set_Mag_Tracking_Param
/*初始化磁导线寻线PID参数：Motion_Set_Mag_Gotoline_Param
/*初始化角度控制参数，包括跟踪方向与期望速度：Motion_Start_2D_Angle
/*初始化弓字形运动控制的两个ratio，确保掉头半径与覆盖重叠率：Motion_Zigzag_Init
/*
/*===================================================================*/
void Motion_Init(T_motion* motion, uint8_t enable);



/*===================     运动控制状态机入口   ======================*/
/*函数说明：
/*状态机
/*
/*
/*调用关系：
/*通过判断motion->state调用不同动作的run函数，例如
/*Motion_Run_Zigzag，即调用弓字形的run函数
/*
/*===================================================================*/
void Motion_Run(T_motion* motion);



/*=======================     弓字形运动控制初始化  =================*/
/*函数说明：
/*弓字形运动控制初始化
/*
/*
/*调用关系：
/*初始化弓字形运动控制的两个ratio，确保掉头半径与覆盖重叠率：Motion_Zigzag_Init
/*
/*===================================================================*/
void Motion_Zigzag_Init(T_motion* motion,float blade_bodywidth_ratio,
						float blade_overlaping_ratio);


/*===================     弓字形运动控制可变参数更新 ===============*/
/*函数说明：
/*用于设定弓字形运动控制所需要的用到的可变参数设定，可变参数指朝向和转向
/*这些参数在每次调用线程时都有可能已经被改变，如果需要体现出来，调用此函数即可
/*
/*调用关系：
/*更新朝向，转向
/*
/*
/*===================================================================*/
void Motion_Zigzag_Start(T_motion* motion,float speed,float heading_x,
						float heading_y,T_motion_zigzag_turn_dir_type turn_dir);



/*=======================     弓字形状态机  =========================*/
/*函数说明：
/*走弓字形的状态机，包含其全部逻辑
/*
/*
/*调用关系：
/*走弓字形含有四个状态：IDLE, LINE, TURN， EXCEPTION
/*根据不同状态调用控制器：Motion_Run_Tracker
/*调用此函数之前应该已经调用过Motion_Zigzag_Init Motion_Zigzag_Start
/*===================================================================*/
static void Motion_Run_Zigzag(T_motion* motion);



/*=======================     电机速度处理   ========================*/
/*函数说明：
/*根据线速度和角速度计算左右轮速, 速度更新，限幅
/*
/*
/*调用关系：
/*
/*===================================================================*/
void Motion_Process_Motor_Speed(T_motion* motion);


motion_imu.c

/*=======================     位姿控制器入口   ======================*/
/*函数说明：
/*角度，直线，弧度等各类跟踪任务的状态机
/*
/*
/*调用关系：
/*根据不同tracking任务，调用不同跟踪任务的run函数，例如跟踪角度，则调用：
/* Motion_Run_2D_Angle， 即跟踪角度的run函数
/*包含：Motion_Run_2D_Angle Motion_Run_2D_Arc Motion_Run_2D_line
/*
/*说明：
/*其中每个run函数的启动的前提是已经调用过相应的start（有些还有相应的
/*Init（））函数
/*
/*===================================================================*/
void Motion_Run_Tracker(T_motion_tracker* obj);



/*===================     角度控制可变参数更新  =====================*/
/*函数说明：
/*更新目标点方向
/*
/*调用关系：
/*需要时调用，更新下一目标点的信息。例如导航时，如果到达当前目标点，可
/*以调用此函数传入下一目标点信息，可以让运动体转向下一目标点方向
/*===================================================================*/
void Motion_Start_2D_Angle(T_motion_tracker* obj,float dir_x,float dir_y,
							float vel);



/*=====================     2D角度跟踪控制入口   ====================*/
/*函数说明：
/*角度跟踪控制的入口函数
/*
/*
/*调用关系：
/*调用 Tracking_2D_Angle
/*进入此函数之前应该已经调用过初始化函数和Motion_Start_2D_Angle函数
/*===================================================================*/
void Motion_Run_2D_Angle(T_motion_tracker* obj);



/*=====================     2D角度跟踪控制算法   ====================*/
/*函数说明：
/*角度跟踪控制算法函数
/*
/*
/*调用关系：
/*由Motion_Run_2D_Angle调用，返回PID角速度控制量
/*调用PID控制器PI_RUN or PI_RUN2
/*===================================================================*/
void Tracking_2D_Angle(T_motion_tracker* obj);



/*===================     直线控制可变参数更新  =====================*/
/*函数说明：
/*更新目标点坐标，方向
/*
/*调用关系：
/*需要时调用，更新下一目标点的信息。例如导航时，如果到达当前目标点，可
/*以调用此函数传入下一目标点信息，可以让运动体运动到下一目标点
/*===================================================================*/
void Motion_Start_2D_Line(T_motion_tracker* obj,float point_x,
						 float point_y, float dir_x, float dir_y, float vel);



/*=====================     2D直线踪控制入口   ====================*/
/*函数说明：
/*直线踪控制的入口函数
/*
/*
/*调用关系：
/*调用 Tracking_2D_Line
/*进入此函数之前应该已经调用过初始化函数和Motion_Start_2D_Line函数
/*===================================================================*/
void Motion_Run_2D_Line(motion->tracker* obj);



/*=====================     2D直线跟踪控制算法   ====================*/
/*函数说明：
/*直线跟踪控制算法函数
/*
/*
/*调用关系：
/*由Motion_Run_2D_Line调用
/*运行直线控制器，更新需要朝向向量
/*===================================================================*/
void Tracking_2D_Angle(T_motion_tracker* obj);



/*=====================     2D弧度踪控制入口   ====================*/
/*函数说明：
/*弧度踪控制的入口函数
/*
/*
/*调用关系：
/*调用 Tracking_2D_Arc
/*进入此函数之前应该已经调用过初始化函数和Motion_Start_2D_Arc
/*===================================================================*/
void Motion_Run_2D_Arc(T_motion_tracker* obj);



/*============================待完成函数============================*/
void Motion_Start_2D_Point(T_motion_tracker* obj,float point_x, 
							float point_y,float vel);
void Motion_Run_2D_Point(motion->tracker* obj);
void Tracking_2D_Point(T_motion_tracker* obj);

void Motion_Start_2D_Arc(T_motion_tracker* obj,float point_x, 
						float point_y, float center_x, float center_y,float vel);
void Motion_Run_2D_Arc(motion->tracker* obj);
void Tracking_2D_Arc(T_motion_tracker* obj);

void 2Dto3D();

/*===================================================================*/






















motion_mag_line.c

/*=======================     磁导线状态机  =========================*/
/*函数说明：
/*
/*
/*
/*调用关系：
/*
/*
/*
/*===================================================================*/
void Motion_Run_Mag_Line(T_motion_tracker* obj)








